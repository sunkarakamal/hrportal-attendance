attendance_system/
│
├── static/               # Static files
│   ├── css/
│   │   └── style.css
│   └── js/
│       └── script.js
├── templates/            # HTML templates
│   ├── login.html
│   ├── register.html
│   ├── dashboard.html
│   └── admin.html
├── uploads/              # Store uploaded images
├── app.py                # Flask backend
├── requirements.txt      # Dependencies
└── database.sql          # MySQL schema

====================================================================

flask
mysql-connector-python
geocoder
face_recognition
Werkzeug

====================================================================

Admin Setup: After registering a user (e.g., admin), manually set is_admin = TRUE in MySQL:

UPDATE users SET is_admin = TRUE WHERE username = 'admin';

====================================================================

-- Create the database
CREATE DATABASE gps_face_db;

-- Use the created database
USE gps_face_db;

-- Create the users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    face_encoding BLOB,  -- To store the face encoding
    is_admin TINYINT DEFAULT 0,  -- To indicate if the user is an admin
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the attendance table
CREATE TABLE attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    latitude DECIMAL(9, 6),
    longitude DECIMAL(9, 6),
    face_verified TINYINT DEFAULT 0,  -- To indicate if the face was verified
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


===============================================================================




navigator.mediaDevices.getUser Media({ video: true })
    .then(stream => {
        video.srcObject = stream;
        console.log("Video stream started successfully");
    })
    .catch(error => {
        console.error("Camera access denied", error);
    });

    ==============================================================


    -- Create the database
CREATE DATABASE gps_face_db;

-- Use the created database
USE gps_face_db;

-- Create the users table
CREATE TABLE users (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    face_encoding BLOB,  
    is_admin TINYINT DEFAULT 0,  
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create the attendance table
CREATE TABLE attendance (
    id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    latitude DECIMAL(9, 6),
    longitude DECIMAL(9, 6),
    face_verified TINYINT DEFAULT 0,  -- To indicate if the face was verified
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE
);


=============================================================================

Admin User:

Username: Shaik Vazid
Email : vazidsk247@gmail.com
Password: Afreed


UPDATE users 
SET is_admin = 1 
WHERE username = 'Shaik Afreed';

SELECT username FROM users;

DELETE FROM users 
WHERE username = 'Usha Rani';


pip install flask werkzeug mysql-connector-python face_recognition geocoder pandas openpyxl xlsxwriter numpy

=================================================================================